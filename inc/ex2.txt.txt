#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/gpio.h"
#include "drivers/pinout.h"
#include "driverlib/pin_map.h"
#include "driverlib/rom.h"
#include "driverlib/rom_map.h"
#include "driverlib/sysctl.h"
#include "driverlib/uart.h"
#include "utils/uartstdio.h"

#define USER_LED1  GPIO_PIN_1 //Número do pino, nao especifica a porta
#define USER_LED2  GPIO_PIN_0
#define USER_LED3  GPIO_PIN_4 //Número do pino, nao especifica a porta
#define USER_LED4  GPIO_PIN_0
//*****************************************************************************
//
// Abrir o terminal (view > terminal) e configurar para serial, 115,200 8-N-1.
//
//*****************************************************************************

//*****************************************************************************
//
// System clock rate in Hz.
//
//*****************************************************************************

uint32_t g_ui32SysClock;

//*****************************************************************************
//
// The error routine that is called if the driver library encounters an error.
//
//*****************************************************************************
#ifdef DEBUG
void
__error__(char *pcFilename, uint32_t ui32Line)
{
}
#endif

//*****************************************************************************
//
// Configure the UART and its pins.  This must be called before UARTprintf().
//
//*****************************************************************************
void
ConfigureUART(void)
{
    //
    // Enable the GPIO Peripheral used by the UART.
    //
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);

    //
    // Enable UART0
    //
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);

    //
    // Configure GPIO Pins for UART mode.
    //
    ROM_GPIOPinConfigure(GPIO_PA0_U0RX);
    ROM_GPIOPinConfigure(GPIO_PA1_U0TX);
    ROM_GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);

    //
    // Initialize the UART for console I/O.
    //
    UARTStdioConfig(0, 115200, g_ui32SysClock);
}

//*****************************************************************************
//
// Print "Hello World!" to the UART on the Intelligent UART Module.
//
//*****************************************************************************
int estado=0;
int
main(void)
{
    //
    // Run from the PLL at 120 MHz.
    //
    g_ui32SysClock = MAP_SysCtlClockFreqSet((SYSCTL_XTAL_25MHZ |
                SYSCTL_OSC_MAIN | SYSCTL_USE_PLL |
                SYSCTL_CFG_VCO_480), 120000000);

    //
    // Configure the device pins.
    //
    PinoutSet(false, false);

    //
    // Enable the GPIO pins for the LED D1 (PN1).
    //
    ROM_GPIOPinTypeGPIOOutput(GPIO_PORTN_BASE, GPIO_PIN_1);


    //
    // Initialize the UART.
    //
    ConfigureUART();

    //
    //
    //
    UARTprintf("Agora vai!\n");
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
        while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOF))
        {
        }
        SysCtlPeripheralEnable(SYSCTL_PERIPH_GPION);
        while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPION))
        {
        }

        SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOJ); // Habilita GPIO J (push-button SW1 = PJ0, push-button SW2 = PJ1)
        while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOJ)); // Aguarda final da habilitação

        GPIOPinTypeGPIOInput(GPIO_PORTJ_BASE, GPIO_PIN_0 | GPIO_PIN_1); // push-buttons SW1 e SW2 como entrada
        GPIOPadConfigSet(GPIO_PORTJ_BASE, GPIO_PIN_0 | GPIO_PIN_1, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU);

        GPIOPinTypeGPIOOutput(GPIO_PORTN_BASE, GPIO_PIN_0);
        GPIOPinTypeGPIOOutput(GPIO_PORTN_BASE, GPIO_PIN_1);
        GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_0);
        GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_4);
    //
    // We are finished.  Hang around flashing D1.
    //
    int x=0;
    while(1)
    {
        if(!(GPIOPinRead(GPIO_PORTJ_BASE, GPIO_PIN_0))){while(!(GPIOPinRead(GPIO_PORTJ_BASE, GPIO_PIN_0))){}
                    estado=estado+1;
                    x=0;
                    if(estado==4){estado=0;GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_0, 0);}
                    }
                if(!(GPIOPinRead(GPIO_PORTJ_BASE, GPIO_PIN_1))){while(!(GPIOPinRead(GPIO_PORTJ_BASE, GPIO_PIN_1))){}
                    estado=0;GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_4, 0);x=0;}

                switch (estado){
                case 0:
                    GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_0, 0);
                    GPIOPinWrite(GPIO_PORTN_BASE, (USER_LED1|USER_LED2), USER_LED1);
                    SysCtlDelay(g_ui32SysClock/20);
                    if (x==0){
                    UARTprintf("Estado 0\n");x=1;}
                    break;
                case 1:
                    GPIOPinWrite(GPIO_PORTN_BASE, (USER_LED1|USER_LED2), USER_LED2);
                    SysCtlDelay(g_ui32SysClock/20);
                    if (x==0){
                    UARTprintf("Estado 1\n");x=1;}
                    break;
                case 2:
                    GPIOPinWrite(GPIO_PORTN_BASE, GPIO_PIN_0, 0);
                    GPIOPinWrite(GPIO_PORTF_BASE, (USER_LED3|USER_LED4), USER_LED3);
                    SysCtlDelay(g_ui32SysClock/20);
                    if (x==0){
                    UARTprintf("Estado 2\n");x=1;}
                    break;
                case 3:
                    GPIOPinWrite(GPIO_PORTF_BASE, (USER_LED3|USER_LED4), USER_LED4);
                    SysCtlDelay(g_ui32SysClock/20);
                    if (x==0){
                    UARTprintf("Estado 3\n");x=1;}
                    break;
                }
    }
}
